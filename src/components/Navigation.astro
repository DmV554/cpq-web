---
interface Props {
    currentPath: string;
}
const { currentPath } = Astro.props;

const navLinks = [
  { href: "/", text: "Inicio" },
  { href: "/nosotros/", text: "Nosotros" },
  { href: "/servicios/", text: "Servicios" },
  { href: "/contacto/", text: "Contacto" },
];
---

<nav class="main-navigation" aria-label="Navegación principal">
  <!-- Navegación desktop -->
  <ul class="hidden md:flex items-center space-x-8">
    {navLinks.map(link => {
      const isActive = currentPath === link.href || currentPath === `${link.href.slice(0, -1)}`;

      return (
        <li>
          <a
            href={link.href}
            class:list={[
              "relative font-medium text-sm tracking-wide py-2 transition-all duration-200 ease-out hover:text-accent-gold focus:outline-none focus:text-accent-gold group",
              isActive ? "text-accent-gold" : "text-neutral-700 hover:text-primary-dark"
            ]}
            aria-current={isActive ? "page" : false}
          >
            {link.text}
            <!-- Indicador de página activa -->
            <span
              class:list={[
                "absolute bottom-0 left-0 w-full h-0.5 bg-accent-gold transform origin-left transition-transform duration-200 ease-out",
                isActive ? "scale-x-100" : "scale-x-0 group-hover:scale-x-100"
              ]}
            ></span>
          </a>
        </li>
      )
    })}
  </ul>

  <!-- Botón de menú móvil -->
  <button
    type="button"
    class="md:hidden p-2 text-neutral-700 hover:text-accent-gold focus:outline-none focus:ring-2 focus:ring-accent-gold rounded-lg transition-colors duration-200"
    aria-label="Abrir menú de navegación"
    id="mobile-menu-button"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Menú móvil (oculto por defecto) -->
  <div class="md:hidden absolute top-full left-0 right-0 bg-white border-t border-neutral-200 shadow-lg hidden" id="mobile-menu">
    <ul class="py-4">
      {navLinks.map(link => {
        const isActive = currentPath === link.href || currentPath === `${link.href.slice(0, -1)}`;

        return (
          <li>
            <a
              href={link.href}
              class:list={[
                "block px-6 py-3 font-medium text-base transition-colors duration-200",
                isActive
                  ? "text-accent-gold bg-accent-gold-subtle border-r-2 border-accent-gold"
                  : "text-neutral-700 hover:text-accent-gold hover:bg-neutral-50"
              ]}
              aria-current={isActive ? "page" : false}
            >
              {link.text}
            </a>
          </li>
        )
      })}
    </ul>
  </div>
</nav>

<script>
  // Script para el menú móvil
  document.addEventListener('DOMContentLoaded', function() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (menuButton && mobileMenu) {
      menuButton.addEventListener('click', function() {
        const isHidden = mobileMenu.classList.contains('hidden');

        if (isHidden) {
          mobileMenu.classList.remove('hidden');
          menuButton.setAttribute('aria-expanded', 'true');
          menuButton.setAttribute('aria-label', 'Cerrar menú de navegación');
        } else {
          mobileMenu.classList.add('hidden');
          menuButton.setAttribute('aria-expanded', 'false');
          menuButton.setAttribute('aria-label', 'Abrir menú de navegación');
        }
      });

      // Cerrar menú al hacer click fuera
      document.addEventListener('click', function(event) {
        if (!menuButton.contains(event.target as Node) && !mobileMenu.contains(event.target as Node)) {
          mobileMenu.classList.add('hidden');
          menuButton.setAttribute('aria-expanded', 'false');
          menuButton.setAttribute('aria-label', 'Abrir menú de navegación');
        }
      });
    }
  });
</script>